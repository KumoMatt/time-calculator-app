name: Build Android APK & AAB

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
     
    # Imposta la working-directory predefinita per tutti gli step 'run'
    defaults:
      run:
        working-directory: TimeCalculatorApp

    steps:
    - uses: actions/checkout@v4
     
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
     
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17' 
        distribution: 'temurin'
     
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
     
    - name: Install Cordova and dependencies
      run: |
        npm install -g cordova@latest
        npm install

    - name: Clean Cordova Platforms and Plugins
      # Rimuove le cartelle platforms e plugins per garantire una reinstallazione pulita
      run: rm -rf platforms plugins || true

    - name: Add Android Platform
      # Aggiunge la piattaforma Android; la versione sarÃ  dettata da package.json
      run: cordova platform add android

    - name: Prepare Android Project
      # Questo step finalizza la preparazione del progetto dopo l'aggiunta della piattaforma
      run: cordova prepare android

    - name: Inject Kotlin Resolution Strategy
      # Inietta il contenuto di build-extras.gradle all'interno del blocco 'allprojects {'
      # Questo assicura che la strategia di risoluzione Kotlin si applichi globalmente
      run: |
        KOTLIN_FIX_CONTENT=$(cat build-extras.gradle | sed 's/\\/\\\\/g' | sed 's/&/\\&/g' | sed 's/$/\\n/g' | tr -d '\n')
        awk -v content="$KOTLIN_FIX_CONTENT" '/^allprojects {/ { print; print content; next }1' platforms/android/build.gradle > platforms/android/build.gradle.tmp && mv platforms/android/build.gradle.tmp platforms/android/build.gradle
        echo "Strategia di risoluzione Kotlin iniettata nel blocco allprojects in platforms/android/build.gradle."

    - name: Build Android App Bundle (AAB)
      # Esegue la build di rilascio per generare l'AAB (comportamento predefinito di cordova-android@12.x.x)
      run: cordova build android --release

    - name: Create build.json for APK output
      # Crea il file build.json per forzare la generazione di un APK
      run: |
        echo '{"android": {"release": {"packageType": "apk", "proguard": {}}}}' > build.json

    - name: Build Android APK
      # Esegue la build di rilascio usando il build.json per generare l'APK
      run: cordova build android --release --buildConfig=build.json

    - name: List all build outputs
      # DEBUG: Elenca il contenuto delle directory di output per verificare i file generati
      run: |
        echo "Listing contents of platforms/android/app/build/outputs/apk/release/"
        ls -R platforms/android/app/build/outputs/apk/release/ || true
        echo "Listing contents of platforms/android/app/build/outputs/bundle/release/"
        ls -R platforms/android/app/build/outputs/bundle/release/ || true

    - name: Upload AAB (Android App Bundle)
      uses: actions/upload-artifact@v4
      with:
        name: android-aab
        path: platforms/android/app/build/outputs/bundle/release/*.aab

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: platforms/android/app/build/outputs/apk/release/*.apk
