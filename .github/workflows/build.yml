name: Build Android APK & AAB

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
     
    # Imposta la working-directory predefinita per tutti gli step 'run'
    defaults:
      run:
        working-directory: TimeCalculatorApp

    steps:
    - uses: actions/checkout@v4
     
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
     
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17' 
        distribution: 'temurin'
     
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        # Le versioni degli strumenti di build e delle platform-tools sono ora specificate all'interno dell'input 'packages'.
        # Questo risolve il warning "Unexpected input(s) 'build-tools', 'platform-tools'".
        packages: |
          build-tools;34.0.0
          platform-tools
     
    - name: Install Cordova and dependencies
      run: |
        npm install -g cordova@latest
        npm install

    - name: Clean Cordova Platforms and Plugins
      run: rm -rf platforms plugins || true

    - name: Add Android Platform
      run: cordova platform add android

    - name: Prepare Android Project
      run: cordova prepare android

    - name: Ensure gradlew exists and is executable
      run: |
        # Change to the Android platform directory
        cd platforms/android
        # Check if gradlew exists, if not, try to generate it
        if [ ! -f gradlew ]; then
            echo "gradlew not found. Attempting to generate Gradle wrapper..."
            # This command typically creates gradlew and gradle/wrapper
            # Ensure Gradle is in PATH for this to work, which it should be from setup-android
            gradle wrapper --gradle-version 8.5 # Explicitly set a version known to be compatible
            echo "Gradle wrapper generation attempted."
        fi
        # Make gradlew executable in case it was just generated or wasn't executable
        chmod +x ./gradlew
        echo "gradlew is now executable."
        # Return to the main working directory
        cd ../..

    - name: Force Android Gradle Plugin version
      run: |
        # Modifica build.gradle (root) per AGP version
        sed -i "s|classpath 'com.android.tools.build:gradle:.*'|classpath 'com.android.tools.build:gradle:8.1.4'|" platforms/android/build.gradle
        echo "Forzata la versione di Android Gradle Plugin (8.1.4)."

    - name: Inject Kotlin Resolution Strategy
      run: |
        KOTLIN_FIX_CONTENT=$(cat build-extras.gradle | sed 's/\\/\\\\/g' | sed 's/&/\\&/g' | sed 's/$/\\n/g' | tr -d '\n')
        awk -v content="$KOTLIN_FIX_CONTENT" '/^allprojects {/ { print; print content; next }1' platforms/android/build.gradle > platforms/android/build.gradle.tmp && mv platforms/android/build.gradle.tmp platforms/android/build.gradle
        echo "Strategia di risoluzione Kotlin iniettata nel blocco allprojects in platforms/android/build.gradle."

    - name: Create Keystore
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: |
        # Rimuove il keystore esistente per garantire una nuova generazione pulita
        if [ -f release.keystore ]; then
          echo "Eliminazione del keystore esistente per rigenerazione..."
          rm release.keystore
        fi
        keytool -genkey -v -keystore release.keystore -alias my_app_alias -keyalg RSA -keysize 2048 -validity 10000 \
        -dname "CN=Your Name, OU=Your Org, O=Your Company, L=Your City, ST=Your State, C=Your Country" \
        -storepass "${{ secrets.KEYSTORE_STORE_PASSWORD }}" -keypass "${{ secrets.KEYSTORE_KEY_PASSWORD }}"
        echo "Keystore generato in release.keystore"

    - name: Copy Keystore to Android Platform
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      # Copia il keystore generato/esistente nella directory della piattaforma Android
      run: |
        mkdir -p platforms/android/
        cp release.keystore platforms/android/release.keystore
        echo "Keystore copiato in platforms/android/release.keystore"

    # Ordine modificato: AAB build, poi Unsigned APK, poi Zipalign (su unsigned), poi Sign (su zipaligned)

    - name: Build AAB using gradlew
      # Esegue direttamente il comando Gradle per generare l'AAB
      run: |
        cd platforms/android
        ./gradlew bundleRelease
        cd ../..
        echo "AAB generato tramite gradlew."

    - name: Build Unsigned APK using gradlew
      # Esegue direttamente il comando Gradle per generare l'APK non firmato
      run: |
        cd platforms/android
        ./gradlew assembleRelease
        cd ../..
        echo "APK non firmato generato tramite gradlew."

    - name: Identify Unsigned APK path
      id: unsigned_apk_path_step
      run: |
        # Trova l'APK non firmato. Il nome Ã¨ app-release-unsigned.apk
        UNSIGNED_APK_PATH=$(find platforms/android/app/build/outputs/apk/release/ -name "app-release-unsigned.apk" | head -n 1)
        echo "Identified unsigned APK: $UNSIGNED_APK_PATH"
        if [ -z "$UNSIGNED_APK_PATH" ]; then
          echo "Error: Unsigned APK not found for zipaligning!"
          exit 1
        fi
        echo "unsigned_apk_path=$UNSIGNED_APK_PATH" >> "$GITHUB_OUTPUT"

    - name: Zipalign Unsigned APK
      id: zipalign_unsigned_apk_step
      run: |
        ZIPALIGN_PATH="${ANDROID_HOME}/build-tools/34.0.0/zipalign"
        UNSIGNED_APK_PATH="${{ steps.unsigned_apk_path_step.outputs.unsigned_apk_path }}"
        ZIPALIGNED_UNSIGNED_APK_PATH="${UNSIGNED_APK_PATH/.apk/-zipaligned.apk}" # Nuovo nome per l'APK zipaligned

        "$ZIPALIGN_PATH" -v 4 "$UNSIGNED_APK_PATH" "$ZIPALIGNED_UNSIGNED_APK_PATH"
        echo "Unsigned APK zipaligned successfully: $ZIPALIGNED_UNSIGNED_APK_PATH"
        echo "zipaligned_unsigned_apk_path=$ZIPALIGNED_UNSIGNED_APK_PATH" >> "$GITHUB_OUTPUT"

    - name: Sign Zipaligned APK
      id: sign_zipaligned_apk_step
      run: |
        APKSIGNER_PATH="${ANDROID_HOME}/build-tools/34.0.0/apksigner"
        ZIPALIGNED_UNSIGNED_APK_PATH="${{ steps.zipalign_unsigned_apk_step.outputs.zipaligned_unsigned_apk_path }}"
        FINAL_SIGNED_APK_PATH="${ZIPALIGNED_UNSIGNED_APK_PATH/.apk/-signed-final.apk}" # Creiamo un nuovo file per l'APK firmato e finale
        
        "$APKSIGNER_PATH" sign --ks release.keystore \
          --ks-key-alias my_app_alias \
          --ks-pass pass:"${{ secrets.KEYSTORE_STORE_PASSWORD }}" \
          --key-pass pass:"${{ secrets.KEYSTORE_KEY_PASSWORD }}" \
          --out "$FINAL_SIGNED_APK_PATH" \
          "$ZIPALIGNED_UNSIGNED_APK_PATH"
        
        echo "APK signed successfully: $FINAL_SIGNED_APK_PATH"
        echo "final_signed_apk_path=$FINAL_SIGNED_APK_PATH" >> "$GITHUB_OUTPUT"

    - name: Verify Final APK Signature
      # Verifica la firma dell'APK finale per debug
      run: |
        APKSIGNER_PATH="${ANDROID_HOME}/build-tools/34.0.0/apksigner"
        FINAL_SIGNED_APK_PATH="${{ steps.sign_zipaligned_apk_step.outputs.final_signed_apk_path }}"
        echo "Verifying signature of: $FINAL_SIGNED_APK_PATH"
        "$APKSIGNER_PATH" verify --verbose "$FINAL_SIGNED_APK_PATH" || echo "Signature verification FAILED!"

    - name: Find and list all final build outputs
      # DEBUG: Cerca e elenca ricorsivamente tutti i file .apk e .aab dalla radice del working directory
      run: |
        echo "Searching for .apk files from current working directory:"
        find . -name "*.apk" || true
        echo "Searching for .aab files from current working directory:"
        find . -name "*.aab" || true

    - name: Upload AAB (Android App Bundle)
      uses: actions/upload-artifact@v4
      with:
        name: android-aab
        path: TimeCalculatorApp/platforms/android/app/build/outputs/bundle/release/*.aab

    - name: Upload Signed and Zipaligned APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-signed-zipaligned
        path: TimeCalculatorApp/${{ steps.sign_zipaligned_apk_step.outputs.final_signed_apk_path }}
